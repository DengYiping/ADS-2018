\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{object} \PYG{n+nc}{HeapSortVariant} \PYG{o}{\PYGZob{}}
  \PYG{k}{import} \PYG{n+nn}{HeapSort.\PYGZus{}}

  \PYG{k}{def} \PYG{n}{moveBottom}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{](}\PYG{n}{a}\PYG{k}{:} \PYG{k+kt}{Array}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{],} \PYG{n}{size}\PYG{k}{:} \PYG{k+kt}{Int}\PYG{o}{)}\PYG{k}{:} \PYG{k+kt}{Unit} \PYG{o}{=} \PYG{o}{\PYGZob{}}
    \PYG{k}{if}\PYG{o}{(}\PYG{n}{size} \PYG{o}{\PYGZlt{}=} \PYG{l+m+mi}{1}\PYG{o}{)}
      \PYG{k}{return}
    \PYG{k}{val} \PYG{n}{top} \PYG{k}{=} \PYG{n}{a}\PYG{o}{(}\PYG{l+m+mi}{0}\PYG{o}{)}
    \PYG{c+c1}{//move the array}
    \PYG{n+nc}{System}\PYG{o}{.}\PYG{n}{arraycopy}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{l+m+mi}{1}\PYG{o}{,} \PYG{n}{a}\PYG{o}{,} \PYG{l+m+mi}{0}\PYG{o}{,} \PYG{n}{size} \PYG{o}{\PYGZhy{}} \PYG{l+m+mi}{1}\PYG{o}{)}
    \PYG{n}{a}\PYG{o}{(}\PYG{n}{size} \PYG{o}{\PYGZhy{}} \PYG{l+m+mi}{1}\PYG{o}{)} \PYG{k}{=} \PYG{n}{top}
  \PYG{o}{\PYGZcb{}}
  \PYG{k}{def} \PYG{n}{recoverBottom}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{](}\PYG{n}{a}\PYG{k}{:} \PYG{k+kt}{Array}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{],} \PYG{n}{size}\PYG{k}{:} \PYG{k+kt}{Int}\PYG{o}{)}\PYG{k}{:} \PYG{k+kt}{Unit}  \PYG{o}{=} \PYG{o}{\PYGZob{}}
    \PYG{k}{if}\PYG{o}{(}\PYG{n}{size} \PYG{o}{\PYGZlt{}=} \PYG{l+m+mi}{1}\PYG{o}{)}
      \PYG{k}{return}
    \PYG{c+c1}{//recover the array}
    \PYG{k}{val} \PYG{n}{top} \PYG{k}{=} \PYG{n}{a}\PYG{o}{(}\PYG{n}{size} \PYG{o}{\PYGZhy{}} \PYG{l+m+mi}{1}\PYG{o}{)}
    \PYG{n+nc}{System}\PYG{o}{.}\PYG{n}{arraycopy}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{l+m+mi}{0}\PYG{o}{,} \PYG{n}{a}\PYG{o}{,} \PYG{l+m+mi}{1}\PYG{o}{,} \PYG{n}{size} \PYG{o}{\PYGZhy{}} \PYG{l+m+mi}{1}\PYG{o}{)}
    \PYG{n}{a}\PYG{o}{(}\PYG{l+m+mi}{0}\PYG{o}{)} \PYG{k}{=} \PYG{n}{top}
  \PYG{o}{\PYGZcb{}}

  \PYG{k}{def} \PYG{n}{checkHeap}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{](}\PYG{n}{a}\PYG{k}{:} \PYG{k+kt}{Array}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{],} \PYG{n}{parent}\PYG{k}{:} \PYG{k+kt}{Int}\PYG{o}{,} \PYG{n}{size}\PYG{k}{:} \PYG{k+kt}{Int}\PYG{o}{)(}\PYG{k}{implicit} \PYG{n}{ord}\PYG{k}{:} \PYG{k+kt}{Ordering}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{])}\PYG{k}{:} \PYG{k+kt}{Boolean} \PYG{o}{=} \PYG{o}{\PYGZob{}}
    \PYG{k}{val} \PYG{n}{left} \PYG{k}{=} \PYG{n}{indexLeft}\PYG{o}{(}\PYG{n}{parent}\PYG{o}{)}
    \PYG{k}{val} \PYG{n}{right} \PYG{k}{=} \PYG{n}{indexRight}\PYG{o}{(}\PYG{n}{parent}\PYG{o}{)}

    \PYG{k}{var} \PYG{n}{largest} \PYG{k}{=} \PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{1}
    \PYG{n}{largest} \PYG{k}{=} \PYG{k}{if}\PYG{o}{(}\PYG{n}{left} \PYG{o}{\PYGZlt{}} \PYG{n}{size} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{ord}\PYG{o}{.}\PYG{n}{gt}\PYG{o}{(}\PYG{n}{a}\PYG{o}{(}\PYG{n}{left}\PYG{o}{),} \PYG{n}{a}\PYG{o}{(}\PYG{n}{parent}\PYG{o}{)))} \PYG{n}{left} \PYG{k}{else} \PYG{n}{parent}
    \PYG{n}{largest} \PYG{k}{=} \PYG{k}{if}\PYG{o}{(}\PYG{n}{right} \PYG{o}{\PYGZlt{}} \PYG{n}{size} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{ord}\PYG{o}{.}\PYG{n}{gt}\PYG{o}{(}\PYG{n}{a}\PYG{o}{(}\PYG{n}{right}\PYG{o}{),} \PYG{n}{a}\PYG{o}{(}\PYG{n}{largest}\PYG{o}{)))} \PYG{n}{right} \PYG{k}{else} \PYG{n}{largest}

    \PYG{k}{if}\PYG{o}{(}\PYG{n}{left} \PYG{o}{\PYGZlt{}} \PYG{n}{size} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{right} \PYG{o}{\PYGZlt{}} \PYG{n}{size}\PYG{o}{)}
      \PYG{n}{largest} \PYG{o}{==} \PYG{n}{parent} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{checkHeap}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{n}{left}\PYG{o}{,} \PYG{n}{size}\PYG{o}{)} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{checkHeap}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{n}{right}\PYG{o}{,} \PYG{n}{size}\PYG{o}{)}
    \PYG{k}{else} \PYG{k}{if} \PYG{o}{(}\PYG{n}{left} \PYG{o}{\PYGZlt{}} \PYG{n}{size}\PYG{o}{)}
      \PYG{n}{largest} \PYG{o}{==} \PYG{n}{parent} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{checkHeap}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{n}{left}\PYG{o}{,} \PYG{n}{size}\PYG{o}{)}
    \PYG{k}{else} \PYG{k}{if} \PYG{o}{(}\PYG{n}{right} \PYG{o}{\PYGZlt{}} \PYG{n}{size}\PYG{o}{)}
      \PYG{n}{largest} \PYG{o}{==} \PYG{n}{parent} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{checkHeap}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{n}{right}\PYG{o}{,} \PYG{n}{size}\PYG{o}{)}
    \PYG{k}{else}
      \PYG{k+kc}{true}
  \PYG{o}{\PYGZcb{}}

  \PYG{k}{def} \PYG{n}{tryBottom}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{](}\PYG{n}{a}\PYG{k}{:} \PYG{k+kt}{Array}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{],}  \PYG{n}{size}\PYG{k}{:} \PYG{k+kt}{Int}\PYG{o}{)(}\PYG{k}{implicit} \PYG{n}{ord}\PYG{k}{:} \PYG{k+kt}{Ordering}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{])}\PYG{k}{:}\PYG{k+kt}{Boolean} \PYG{o}{=} \PYG{o}{\PYGZob{}}
    \PYG{c+c1}{//try to move to the bottom}
    \PYG{k}{if}\PYG{o}{(}\PYG{n}{size} \PYG{o}{\PYGZlt{}=} \PYG{l+m+mi}{1}\PYG{o}{)}
      \PYG{k}{return} \PYG{k+kc}{true}

    \PYG{n}{moveBottom}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{n}{size}\PYG{o}{)}


    \PYG{c+cm}{/*}
\PYG{c+cm}{    val parent = indexParent(size \PYGZhy{} 1)}
\PYG{c+cm}{    val left = indexLeft(parent)}
\PYG{c+cm}{    val right = indexRight(parent)}

\PYG{c+cm}{    var largest = \PYGZhy{}1}
\PYG{c+cm}{    largest = if(left \PYGZlt{} size \PYGZam{}\PYGZam{} ord.gt(a(left), a(parent))) left else parent}
\PYG{c+cm}{    largest = if(right \PYGZlt{} size \PYGZam{}\PYGZam{} ord.gt(a(right), a(largest))) right else largest}

\PYG{c+cm}{*/}
    \PYG{k}{if}\PYG{o}{(}\PYG{n}{size} \PYG{o}{==} \PYG{l+m+mi}{2} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{checkHeap}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{l+m+mi}{0}\PYG{o}{,} \PYG{l+m+mi}{2}\PYG{o}{))}
      \PYG{k+kc}{true}
    \PYG{c+c1}{//need to make sure the top part is working and the ending leaf is working}
    \PYG{k}{if}\PYG{o}{(}\PYG{n}{checkHeap}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{n}{indexParent}\PYG{o}{(}\PYG{n}{size} \PYG{o}{\PYGZhy{}} \PYG{l+m+mi}{1}\PYG{o}{),} \PYG{n}{size}\PYG{o}{)} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{checkHeap}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{l+m+mi}{0}\PYG{o}{,} \PYG{l+m+mi}{3}\PYG{o}{))}
      \PYG{k+kc}{true}
    \PYG{k}{else} \PYG{o}{\PYGZob{}}
      \PYG{n}{recoverBottom}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{n}{size}\PYG{o}{)}
      \PYG{k+kc}{false}
    \PYG{o}{\PYGZcb{}}
  \PYG{o}{\PYGZcb{}}
  \PYG{k}{def} \PYG{n}{heapSortVariant}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{](}\PYG{n}{a}\PYG{k}{:} \PYG{k+kt}{Array}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{])(}\PYG{k}{implicit} \PYG{n}{ord}\PYG{k}{:} \PYG{k+kt}{Ordering}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{])}\PYG{k}{:}\PYG{k+kt}{Unit} \PYG{o}{=} \PYG{o}{\PYGZob{}}
    \PYG{n}{maxHeapBuild}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{n}{a}\PYG{o}{.}\PYG{n}{length}\PYG{o}{)}
    \PYG{k}{for}\PYG{o}{(}\PYG{n}{i} \PYG{k}{\PYGZlt{}\PYGZhy{}} \PYG{n}{a}\PYG{o}{.}\PYG{n}{indices}\PYG{o}{.}\PYG{n}{reverse}\PYG{o}{)\PYGZob{}}
      \PYG{c+c1}{//in a reverse order sort it}
      \PYG{n}{swap}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{l+m+mi}{0}\PYG{o}{,} \PYG{n}{i}\PYG{o}{)} \PYG{c+c1}{//put the last one at the back}
      \PYG{k}{if}\PYG{o}{(!}\PYG{n}{tryBottom}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{n}{i}\PYG{o}{))} \PYG{n}{maxHeapify}\PYG{o}{(}\PYG{n}{a}\PYG{o}{,} \PYG{l+m+mi}{0}\PYG{o}{,} \PYG{n}{i}\PYG{o}{)} \PYG{c+c1}{//only heapify when it is not right}
    \PYG{o}{\PYGZcb{}}
  \PYG{o}{\PYGZcb{}}

  \PYG{k}{def} \PYG{n}{genArray}\PYG{o}{(}\PYG{n}{n}\PYG{k}{:} \PYG{k+kt}{Int}\PYG{o}{)}\PYG{k}{:}\PYG{k+kt}{Array}\PYG{o}{[}\PYG{k+kt}{Int}\PYG{o}{]} \PYG{k}{=} \PYG{o}{\PYGZob{}}
    \PYG{k}{val} \PYG{n}{r} \PYG{k}{=} \PYG{k}{new} \PYG{n}{scala}\PYG{o}{.}\PYG{n}{util}\PYG{o}{.}\PYG{n+nc}{Random}
    \PYG{l+m+mi}{1} \PYG{n}{to} \PYG{n}{n} \PYG{n}{map} \PYG{o}{\PYGZob{}} \PYG{k}{\PYGZus{}} \PYG{k}{=\PYGZgt{}} \PYG{n}{r}\PYG{o}{.}\PYG{n}{nextInt}\PYG{o}{(}\PYG{l+m+mi}{100}\PYG{o}{)\PYGZcb{}} \PYG{n}{toArray}
  \PYG{o}{\PYGZcb{}}
  \PYG{k}{def} \PYG{n}{dataGenerator}\PYG{o}{[}\PYG{k+kt}{T}\PYG{o}{](}\PYG{n}{sort\PYGZus{}algo}\PYG{k}{:}\PYG{o}{(}\PYG{k+kt}{Array}\PYG{o}{[}\PYG{k+kt}{Int}\PYG{o}{])} \PYG{k}{=\PYGZgt{}} \PYG{n+nc}{Unit}\PYG{o}{)}\PYG{k}{:}\PYG{k+kt}{String} \PYG{o}{=} \PYG{o}{\PYGZob{}}
    \PYG{k}{val} \PYG{n}{input} \PYG{k}{=} \PYG{o}{(}\PYG{l+m+mi}{1} \PYG{n}{to} \PYG{l+m+mi}{40}\PYG{o}{)} \PYG{n}{map} \PYG{o}{\PYGZob{}} \PYG{k}{\PYGZus{}} \PYG{o}{*} \PYG{l+m+mi}{1000}\PYG{o}{\PYGZcb{}}
    \PYG{c+c1}{//generate data set}
    \PYG{k}{val} \PYG{n}{result} \PYG{k}{=} \PYG{n}{input} \PYG{n}{map} \PYG{o}{\PYGZob{}}
      \PYG{n}{n} \PYG{k}{=\PYGZgt{}}
        \PYG{k}{val} \PYG{n}{arr} \PYG{k}{=} \PYG{n}{genArray}\PYG{o}{(}\PYG{n}{n}\PYG{o}{)}
        \PYG{o}{(}\PYG{n}{n}\PYG{o}{,} \PYG{n+nc}{Timer}\PYG{o}{.}\PYG{n}{avergedJustTime}\PYG{o}{(}\PYG{n}{sort\PYGZus{}algo}\PYG{o}{(}\PYG{n}{arr}\PYG{o}{)))}
    \PYG{o}{\PYGZcb{}}

    \PYG{l+s}{\PYGZdq{}[\PYGZdq{}} \PYG{o}{+} \PYG{n}{result}\PYG{o}{.}\PYG{n}{mkString}\PYG{o}{(}\PYG{l+s}{\PYGZdq{},\PYGZdq{}}\PYG{o}{)} \PYG{o}{+} \PYG{l+s}{\PYGZdq{}]\PYGZdq{}}
  \PYG{o}{\PYGZcb{}}
  \PYG{k}{def} \PYG{n}{main}\PYG{o}{(}\PYG{n}{args}\PYG{k}{:} \PYG{k+kt}{Array}\PYG{o}{[}\PYG{k+kt}{String}\PYG{o}{])}\PYG{k}{:}\PYG{k+kt}{Unit} \PYG{o}{=} \PYG{o}{\PYGZob{}}
    \PYG{c+c1}{// the program that produces results}
    \PYG{n}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}normal = \PYGZdq{}} \PYG{o}{+} \PYG{n}{dataGenerator}\PYG{o}{(}\PYG{n}{heapSort}\PYG{o}{[}\PYG{k+kt}{Int}\PYG{o}{]))}
    \PYG{n}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}variant = \PYGZdq{}} \PYG{o}{+} \PYG{n}{dataGenerator}\PYG{o}{(}\PYG{n}{heapSortVariant}\PYG{o}{[}\PYG{k+kt}{Int}\PYG{o}{]))}
  \PYG{o}{\PYGZcb{}}
\PYG{o}{\PYGZcb{}}
\end{Verbatim}
